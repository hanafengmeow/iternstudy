package com.quick.immi.ai.handler;

import com.google.gson.Gson;
import com.quick.immi.ai.database.DocumentGenerationManager;
import com.quick.immi.ai.entity.*;
import com.quick.immi.ai.handler.familybased.I130Handler;

import java.util.logging.Level;
import java.util.logging.Logger;

public abstract class FormHandler {
    private static final Logger log = Logger.getLogger(FormHandler.class.getName());

    private final DocumentGenerationManager documentGenerationManager;
    private final FormGenerationTask formGenerationTask;

    public FormHandler(DocumentGenerationManager documentGenerationManager, FormGenerationTask formGenerationTask) {
        this.documentGenerationManager = documentGenerationManager;
        this.formGenerationTask = formGenerationTask;
    }

    public void handle(){
        Document document = null;
        try {
            document = generateDocument();
            updateFormGenerationTaskStatus(formGenerationTask, document.getS3Location(), TaskStatus.SUCCESS);
            updateDocument(document, TaskStatus.SUCCESS);
            log.log(Level.INFO, String.format("generate %s successfully for taskId = %s", document.getType(), formGenerationTask.getId()));
        } catch (Exception exp){
            log.log(Level.SEVERE, String.format("fail to generate document for task %s", formGenerationTask), exp);
            updateFormGenerationTaskStatus(formGenerationTask, null, TaskStatus.FAILED);
            updateDocument(document, TaskStatus.FAILED);
            Long documentId = this.formGenerationTask.getDocumentId();
            updateDocumentWithError(documentId, exp.getMessage());
            throw new RuntimeException(exp);
        }
    }

    public abstract Document generateDocument();

    protected void updateDocument(Document document, TaskStatus documentStatus){
        document.setStatus(documentStatus.getValue());
        document.setUpdatedAt(System.currentTimeMillis());
        this.documentGenerationManager.updateDocument(document);
    }

    protected Long updateDocumentWithError(Long documentId, String error){
        Document existDocument = this.documentGenerationManager.getDocument(documentId);

        existDocument.setStatus(TaskStatus.FAILED.getValue());
        existDocument.setUpdatedAt(System.currentTimeMillis());
        existDocument.setCreatedBy(Role.SYSTEM.getValue());
        DocumentInfo documentInfo;
        if (existDocument.getInfo() != null && !existDocument.getInfo().isEmpty()) {
            documentInfo = new Gson().fromJson(existDocument.getInfo(), DocumentInfo.class);
            documentInfo.setError(DocumentError.builder()
                .source("Java Lambda")
                .message(error)
                .build());
        } else {
            documentInfo = DocumentInfo.builder()
                .error(DocumentError.builder()
                    .source("Java Lambda")
                    .message(error)
                    .build())
                .build();
        }
        existDocument.setInfo(new Gson().toJson(documentInfo));
        documentGenerationManager.updateDocument(existDocument);
        return existDocument.getId();
    }


    protected Document createDocument(FormMapping formMapping, String s3Location){
        Document document = Document.builder()
                .userId(formGenerationTask.getUserId())
                .caseId(formGenerationTask.getCaseId())
                .identify("applicant")
                .status(TaskStatus.SUCCESS.getValue())
                .type(formMapping.getName())
                .fileType("pdf")
                .name(formMapping.getName() + ".pdf")
                .createdBy(Role.SYSTEM.getValue())
                .s3Location(s3Location)
                .autoGenerated(true)
                .createdAt(System.currentTimeMillis())
                .updatedAt(System.currentTimeMillis())
                .build();
        documentGenerationManager.createDocument(document);
        return document;
    }

    protected void updateFormGenerationTaskStatus(FormGenerationTask formGenerationTask, String s3Location, TaskStatus taskStatus){
        formGenerationTask.setStatus(taskStatus.getValue());
        formGenerationTask.setUpdatedAt(System.currentTimeMillis());
        formGenerationTask.setS3Location(s3Location);
        documentGenerationManager.updateFormGenerationTask(formGenerationTask);
    }

}
